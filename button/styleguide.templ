package button

import (
	"github.com/iamajoe/templui/utils"
	"github.com/iamajoe/templui/theme"
)

type styleguideItem struct {
	title       string
	description string
	usage       string
	opts        [][]OptFn
}

var styleguideItems = []styleguideItem{
	{
		title: "Variant (Synthwave)",
		usage: `
@button.New(button.WithCSS(theme.Button(theme.ButtonProps{
  Variant: theme.VariantDefault | VariantBorder | VariantTransparent | VariantLink,
}))) { Button }
    `,
		opts: [][]OptFn{
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Variant: theme.VariantDefault,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Variant: theme.VariantBorder,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Variant: theme.VariantTransparent,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Variant: theme.VariantLink,
				})),
			},
		},
	},
	{
		title: "Role (Synthwave)",
		usage: `
@button.New(button.WithCSS(theme.Button(theme.ButtonProps{
  Role: theme.RoleDefault | RolePrimary | RoleSecondary | RoleInfo | RoleWarning | RoleDanger | RoleSuccess,
}))) { Button }
    `,
		opts: [][]OptFn{
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Role: theme.RoleDefault,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Role: theme.RolePrimary,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Role: theme.RoleSecondary,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Role: theme.RoleInfo,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Role: theme.RoleWarning,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Role: theme.RoleDanger,
				})),
			},
			[]OptFn{
				WithCSS(theme.Button(theme.ButtonProps{
					Role: theme.RoleSuccess,
				})),
			},
		},
	},
}

css exampleCss() {
	border: 1px solid red;
}

templ Styleguide() {
	<div class={ theme.Synthwave() }></div>
	<pre class="p-6 whitespace-pre-wrap bg-gray-100">
		{ `
  @button.New(
      button.WithID("zing"),
      button.WithClasses("foo"),
      button.WithAttributes(map[string]any{"data-zed": "zung"}),
      button.WithKind(button.KindSubmit),
      button.WithCSS(exampleCss()),
      button.WithDisabled(),
      func(c *button.Button) {
          c.ClassNames = append(c.ClassNames, "bar")
      },
  ) { Button }
  ` }
	</pre>
	for _, component := range styleguideItems {
		@utils.Item(component.title, component.description, component.usage) {
			<div class="flex flex-wrap">
				for _, opts := range component.opts {
					<div class="mr-2">
						@New(opts...) {
							Button 
						}
					</div>
				}
			</div>
		}
	}
}
